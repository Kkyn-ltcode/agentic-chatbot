import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, orderBy, limit } from 'firebase/firestore';

// Helper function to conditionally join class names
const classNames = (...classes) => {
  return classes.filter(Boolean).join(' ');
};

// Tooltip Component
const Tooltip = ({ children, text }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [position, setPosition] = useState({ top: 0, left: 0 });
  const targetRef = useRef(null);
  const tooltipRef = useRef(null);
  let showTimeout;
  let hideTimeout;

  const handleMouseEnter = () => {
    clearTimeout(hideTimeout);
    showTimeout = setTimeout(() => {
      setIsVisible(true);
    }, 50); // Appear almost instantly (50ms delay)
  };

  const handleMouseLeave = () => {
    clearTimeout(showTimeout);
    hideTimeout = setTimeout(() => {
      setIsVisible(false);
    }, 100); // Disappear quickly (100ms delay)
  };

  useEffect(() => {
    if (isVisible && targetRef.current && tooltipRef.current) {
      const targetRect = targetRef.current.getBoundingClientRect();
      const tooltipRect = tooltipRef.current.getBoundingClientRect();

      // Position the tooltip above the target element, centered horizontally
      const top = targetRect.top - tooltipRect.height - 8; // 8px padding above
      const left = targetRect.left + (targetRect.width / 2) - (tooltipRect.width / 2);

      setPosition({ top: top, left: left });
    }
  }, [isVisible, text]); // Re-calculate position if text changes (e.g., dynamic titles)

  // Clean up timeouts on component unmount
  useEffect(() => {
    return () => {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
    };
  }, []);

  return (
    <div className="relative inline-block">
      {/* Clone children to attach ref and event handlers */}
      {React.cloneElement(children, {
        ref: targetRef,
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
      })}
      {isVisible && (
        <div
          ref={tooltipRef}
          className="fixed z-50 px-3 py-1 bg-black text-white text-xs rounded-md shadow-lg whitespace-nowrap"
          style={{ top: position.top, left: position.left }}
        >
          {text}
        </div>
      )}
    </div>
  );
};


// Main App component
const App = () => {
  // Firebase and Firestore states
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);

  // Chat states
  const [inputText, setInputText] = useState('');
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(true); // Visual state: true for collapsed, false for expanded
  const [isSidebarLockedOpen, setIsSidebarLockedOpen] = useState(false); // New state: true if sidebar is locked open by click
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false); // For LLM response
  const [isConversationsLoading, setIsConversationsLoading] = useState(true); // For Firestore loading

  // Conversation history states
  const [conversations, setConversations] = useState([]); // List of { id, title, messages }
  const [currentConversationId, setCurrentConversationId] = useState(null);
  const [currentConversationTitle, setCurrentConversationTitle] = useState('New Chat');

  const chatDisplayRef = useRef(null);

  // Initialize Firebase and authenticate
  useEffect(() => {
    try {
      const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
      const app = initializeApp(firebaseConfig);
      const authInstance = getAuth(app);
      const firestoreInstance = getFirestore(app);
      setAuth(authInstance);
      setDb(firestoreInstance);

      onAuthStateChanged(authInstance, async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          // Sign in anonymously if no initial token is provided (e.g., for local development)
          if (typeof __initial_auth_token !== 'undefined') {
            await signInWithCustomToken(authInstance, __initial_auth_token);
          } else {
            await signInAnonymously(authInstance);
          }
          setUserId(authInstance.currentUser?.uid || crypto.randomUUID()); // Fallback for unauthenticated
        }
        setIsAuthReady(true);
      });
    } catch (error) {
      console.error("Error initializing Firebase:", error);
      setIsAuthReady(true); // Still set ready to allow UI to load, but with error
    }
  }, []);

  // Firestore Listener for conversations
  useEffect(() => {
    if (!db || !userId || !isAuthReady) return;

    setIsConversationsLoading(true);
    const appId = typeof __app_id !== 'undefined' ? String(__app_id) : 'default-app-id'; // Ensure appId is a string
    const conversationsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/conversations`);
    const q = query(conversationsCollectionRef, orderBy('lastUpdated', 'desc'), limit(10)); // Order by last updated

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const fetchedConversations = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setConversations(fetchedConversations);
      setIsConversationsLoading(false);

      // If no conversation is active and there are fetched conversations, load the most recent one
      if (!currentConversationId && fetchedConversations.length > 0) {
        loadConversation(fetchedConversations[0].id);
      }
    }, (error) => {
      console.error("Error fetching conversations:", error);
      setIsConversationsLoading(false);
    });

    return () => unsubscribe(); // Cleanup listener on component unmount
  }, [db, userId, isAuthReady, currentConversationId]); // Added currentConversationId to trigger re-load if it changes externally

  // Scroll to the bottom of the chat display when messages change
  useEffect(() => {
    if (chatDisplayRef.current) {
      chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;
    }
  }, [messages]);

  // Handle input change
  const handleInputChange = (e) => {
    setInputText(e.target.value);
  };

  // Function to save or update a conversation in Firestore
  const saveConversation = async (id, title, msgs) => {
    if (!db || !userId) {
      console.error("Firestore not initialized or user not authenticated.");
      return;
    }
    const appId = typeof __app_id !== 'undefined' ? String(__app_id) : 'default-app-id'; // Ensure appId is a string
    const conversationData = {
      title: title,
      messages: JSON.stringify(msgs), // Stringify array for Firestore
      lastUpdated: new Date()
    };
    try {
      if (id) {
        const docRef = doc(db, `artifacts/${appId}/users/${userId}/conversations`, id);
        await setDoc(docRef, conversationData, { merge: true });
      } else {
        const docRef = await addDoc(collection(db, `artifacts/${appId}/users/${userId}/conversations`), conversationData);
        setCurrentConversationId(docRef.id); // Set the ID for the newly created conversation
      }
    } catch (error) {
      console.error("Error saving conversation:", error);
    }
  };

  // Function to load a conversation from Firestore
  const loadConversation = async (id) => {
    if (!db || !userId) return;
    setIsLoading(true);
    const appId = typeof __app_id !== 'undefined' ? String(__app_id) : 'default-app-id'; // Ensure appId is a string
    try {
      const docRef = doc(db, `artifacts/${appId}/users/${userId}/conversations`, id);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        const data = docSnap.data();
        setMessages(JSON.parse(data.messages)); // Parse messages back to array
        setCurrentConversationId(id);
        setCurrentConversationTitle(data.title);
      } else {
        console.warn("Conversation not found:", id);
        setMessages([]);
        setCurrentConversationId(null);
        setCurrentConversationTitle('New Chat');
      }
    } catch (error) {
      console.error("Error loading conversation:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle new chat button click
  const handleNewChat = async () => {
    // Save current conversation if it has messages and an ID
    if (messages.length > 0 && currentConversationId) {
      await saveConversation(currentConversationId, currentConversationTitle, messages);
    } else if (messages.length > 0 && !currentConversationId) {
      // If it's a new unsaved conversation, save it with a default title
      await saveConversation(null, messages[0].text.substring(0, 30) + (messages[0].text.length > 30 ? '...' : ''), messages);
    }

    setMessages([]); // Clear messages for new chat
    setInputText('');
    setCurrentConversationId(null); // No active ID for a brand new chat
    setCurrentConversationTitle('New Chat');
  };

  // Function to call Gemini API
  const callGeminiAPI = async (prompt, currentChatHistory = []) => {
    setIsLoading(true);
    try {
      let chatHistory = [...currentChatHistory];
      if (!chatHistory.some(part => part.parts[0].text === prompt && part.role === 'user')) {
        chatHistory.push({ role: "user", parts: [{ text: prompt }] });
      }

      const payload = { contents: chatHistory };
      const apiKey = "";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        return text;
      } else {
        console.error("Gemini API response structure unexpected:", result);
        return "Error: Could not get a response from Gemini.";
      }
    } catch (error) {
      console.error("Error calling Gemini API:", error);
      return "Error: Failed to connect to Gemini API.";
    } finally {
      setIsLoading(false);
    }
  };

  // Handle sending message
  const handleSendMessage = async () => {
    if (inputText.trim() === '') return;

    const userMessage = { sender: 'user', text: inputText.trim() };
    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setInputText('');

    // Update conversation title if it's a new chat and this is the first message
    if (!currentConversationId && updatedMessages.length === 1) {
        const newTitle = userMessage.text.substring(0, 30) + (userMessage.text.length > 30 ? '...' : '');
        setCurrentConversationTitle(newTitle);
        // Save the initial message and title to get an ID for the new conversation
        await saveConversation(null, newTitle, updatedMessages);
    } else if (currentConversationId) {
        // If it's an existing conversation, just update it
        await saveConversation(currentConversationId, currentConversationTitle, updatedMessages);
    }


    let chatHistoryForLLM = updatedMessages.map(msg => ({
      role: msg.sender === 'user' ? 'user' : 'model',
      parts: [{ text: msg.text }]
    }));

    const botResponse = await callGeminiAPI(userMessage.text, chatHistoryForLLM);
    const botMessage = { sender: 'bot', text: botResponse };
    const finalMessages = [...updatedMessages, botMessage];
    setMessages(finalMessages);

    // Save the conversation again after bot response
    if (currentConversationId) {
        await saveConversation(currentConversationId, currentConversationTitle, finalMessages);
    } else {
        // This case should ideally not happen if saveConversation(null, ...) correctly sets currentConversationId
        // But as a fallback, if currentConversationId is still null, save with new title
        await saveConversation(null, currentConversationTitle, finalMessages);
    }
  };

  // Handle Enter key press for sending message
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Handle Summarize Conversation feature
  const handleSummarizeConversation = async () => {
    if (messages.length === 0) {
      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: "There's no conversation to summarize yet." }]);
      return;
    }

    const conversationText = messages.map(msg => `${msg.sender === 'user' ? 'You' : 'Gemini'}: ${msg.text}`).join('\n');
    const prompt = `Please summarize the following conversation:\n\n${conversationText}`;

    const summaryResponse = await callGeminiAPI(prompt, [{ role: "user", parts: [{ text: prompt }] }]);
    const summarizedMessages = [...messages, { sender: 'bot', text: `✨ Summary: ${summaryResponse}` }];
    setMessages(summarizedMessages);
    if (currentConversationId) {
        await saveConversation(currentConversationId, currentConversationTitle, summarizedMessages);
    }
  };

  // Handle Rephrase Last Message feature
  const handleRephraseLastMessage = async () => {
    const lastUserMessage = messages.slice().reverse().find(msg => msg.sender === 'user');

    if (!lastUserMessage) {
      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: "There's no user message to rephrase." }]);
      return;
    }

    const prompt = `Please rephrase the following sentence in a different way:\n\n"${lastUserMessage.text}"`;
    const rephrasedResponse = await callGeminiAPI(prompt, [{ role: "user", parts: [{ text: prompt }] }]);
    const rephrasedMessages = [...messages, { sender: 'bot', text: `✨ Rephrased: ${rephrasedResponse}` }];
    setMessages(rephrasedMessages);
    if (currentConversationId) {
        await saveConversation(currentConversationId, currentConversationTitle, rephrasedMessages);
    }
  };

  // Handle deleting a conversation
  const handleDeleteConversation = async (id) => {
    if (!db || !userId) return;
    try {
      const appId = typeof __app_id !== 'undefined' ? String(__app_id) : 'default-app-id'; // Ensure appId is a string
      const docRef = doc(db, `artifacts/${appId}/users/${userId}/conversations`, id);
      await deleteDoc(docRef);
      // If the deleted conversation was the current one, start a new chat
      if (currentConversationId === id) {
        handleNewChat();
      }
    } catch (error) {
      console.error("Error deleting conversation:", error);
    }
  };

  // --- Sidebar Interaction Logic ---
  const handleSidebarMouseEnter = () => {
    if (!isSidebarLockedOpen) {
      setIsSidebarCollapsed(false);
    }
  };

  const handleSidebarMouseLeave = () => {
    if (!isSidebarLockedOpen) {
      setIsSidebarCollapsed(true);
    }
  };

  const handleHamburgerClick = () => {
    const newLockedState = !isSidebarLockedOpen;
    setIsSidebarLockedOpen(newLockedState); // Toggle the locked state

    if (newLockedState) {
        // If locking it, ensure it's expanded
        setIsSidebarCollapsed(false);
    } else {
        // If unlocking it, revert to collapsed (default hover state)
        setIsSidebarCollapsed(true);
    }
  };


  return (
    <div className="flex h-screen bg-white font-inter">
      {/* Sidebar */}
      <div
        className={`flex flex-col ${
          isSidebarCollapsed ? 'w-16' : 'w-64'
        } bg-gray-50 border-r border-gray-200 p-4 shadow-sm transition-all duration-300 ease-in-out`}
        onMouseEnter={handleSidebarMouseEnter}
        onMouseLeave={handleSidebarMouseLeave}
      >
        {/* Hamburger menu icon */}
        <div className="flex items-center mb-6">
          <button
            type="button"
            className="p-2 rounded-full hover:bg-gray-200 focus:outline-none"
            onClick={handleHamburgerClick}
            title="Toggle Sidebar"
          >
            <svg
              className="w-6 h-6 text-gray-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 6h16M4 12h16M4 18h16"
              ></path>
            </svg>
          </button>
        </div>

        {/* New chat button */}
        <button
          type="button"
          className={`flex items-center rounded-full bg-transparent hover:bg-gray-100 text-gray-600 font-medium mb-auto focus:outline-none
            transition-all duration-300 my-1
            ${isSidebarCollapsed ? 'w-10 h-10 p-2' : 'w-full pl-2 pr-4 py-2'}
          `}
          onClick={handleNewChat}
          title="Start a new conversation"
        >
          <svg
            className="flex-shrink-0 w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M12 6v6m0 0v6m0-6h6m-6 0H6" // Plus icon
            ></path>
          </svg>
          <span className={`whitespace-nowrap text-sm transition-all duration-300 ${isSidebarCollapsed ? 'opacity-0 w-0 ml-0' : 'opacity-100 w-auto ml-2'}`}>
            New chat
          </span>
        </button>

        {/* Recent Conversations List */}
        <div className={`mt-4 transition-all duration-300 ${isSidebarCollapsed ? 'max-h-0 opacity-0 overflow-hidden' : 'max-h-full opacity-100'}`}>
          <h3 className={`text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2 transition-all duration-300 ${isSidebarCollapsed ? 'opacity-0 max-h-0' : 'opacity-100 max-h-full'}`}>
            Recent
          </h3>
          {isConversationsLoading ? (
            <div className="text-gray-500 text-sm">Loading conversations...</div>
          ) : conversations.length === 0 ? (
            <div className="text-gray-500 text-sm">No recent chats.</div>
          ) : (
            <ul className="space-y-1">
              {conversations.map((conv) => (
                <li key={conv.id} className="flex items-center justify-between group">
                  <button
                    type="button"
                    className={`flex-grow text-left py-2 px-3 rounded-lg text-sm truncate
                      ${currentConversationId === conv.id ? 'bg-blue-100 text-blue-800 font-semibold' : 'hover:bg-gray-200 text-gray-700'}
                      focus:outline-none`}
                    onClick={() => loadConversation(conv.id)}
                    title={`Load conversation: ${conv.title}`}
                  >
                    {conv.title}
                  </button>
                  <button
                    type="button"
                    onClick={() => handleDeleteConversation(conv.id)}
                    className="ml-2 p-1 rounded-full hover:bg-red-100 text-gray-400 hover:text-red-600 opacity-0 group-hover:opacity-100 transition-opacity focus:outline-none"
                    title="Delete conversation"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                  </button>
                </li>
              ))}
            </ul>
          )}
        </div>


        {/* Settings button */}
        <button
          type="button"
          className={`flex items-center rounded-full bg-transparent hover:bg-gray-100 text-gray-600 font-medium mt-auto focus:outline-none
            transition-all duration-300 my-1
            ${isSidebarCollapsed ? 'w-10 h-10 p-2' : 'w-full pl-2 pr-4 py-2'}
          `}
          title="Open Settings"
        >
          <svg
            className="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.564.342 1.25.21 1.724-1.065z"
            ></path>
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
            ></path>
          </svg>
          <span className={`whitespace-nowrap text-sm transition-all duration-300 ${isSidebarCollapsed ? 'opacity-0 w-0 ml-0' : 'opacity-100 w-auto ml-2'}`}>
              Settings
            </span>
        </button>
      </div>

      {/* Main content area */}
      <div className="flex flex-col flex-grow relative">
        {/* Top header bar for main content */}
        <div className="absolute top-0 left-0 right-0 p-4 flex items-center justify-between bg-white border-b border-white z-10">
          {/* Gemini logo and model selector */}
          <div className="flex items-center">
            <span className="text-xl font-semibold text-gray-800">Gemini</span>
            <div className="relative ml-3">
              <select className="appearance-none bg-transparent border-none text-sm text-gray-600 focus:outline-none cursor-pointer pr-6" title="Select Gemini Model">
                <option>2.5 Flash</option>
                <option>1.5 Pro</option>
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-600">
                <svg
                  className="fill-current h-4 w-4"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                >
                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                </svg>
              </div>
            </div>
          </div>
          {/* Upgrade button and user avatar */}
          <div className="flex items-center space-x-4">
            <button
              type="button"
              className="flex items-center bg-blue-500 text-white text-sm px-4 py-2 rounded-full shadow-md hover:bg-blue-600 transition-colors duration-200 focus:outline-none"
              title="Upgrade to Premium"
            >
              <svg
                className="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M13 7h8m0 0v8m0-8L11 3m-4 8H3m0 0V3m0 8l8 8m0-8v8m0 0H3m8 0h8"
                ></path>
              </svg>
              Upgrade
            </button>
            <div className="w-8 h-8 rounded-full bg-purple-600 flex items-center justify-center text-white font-bold text-sm" title="User Profile">
              N
            </div>
          </div>
        </div>

        {/* Chat display area */}
        <div ref={chatDisplayRef} className={`flex-grow flex flex-col items-center p-4 overflow-y-auto pt-24 ${messages.length === 0 ? 'justify-center' : ''}`}>
          {messages.length === 0 ? (
            <div className="text-4xl font-light text-blue-600">Hello, _</div>
          ) : (
            <div className="w-full max-w-3xl">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex mb-4 ${
                    message.sender === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  <div
                    className={`p-3 rounded-lg max-w-[80%] ${
                      message.sender === 'user'
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-200 text-gray-800'
                    }`}
                  >
                    {message.text}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start mb-4">
                  <div className="p-3 rounded-lg bg-gray-200 text-gray-800 animate-pulse">
                    Thinking...
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Input bar at the bottom */}
        <div className="w-full max-w-3xl mx-auto p-4 pb-8">
          <div className="flex items-center bg-gray-100 border border-gray-200 rounded-2xl shadow-lg px-4 py-3">
            {/* Plus icon for attachments */}
            <button
              type="button"
              className="p-2 rounded-full hover:bg-gray-200 text-gray-600 focus:outline-none"
              title="Attach files"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                ></path>
              </svg>
            </button>

            {/* Input text area */}
            <textarea
              className="flex-grow mx-3 p-2 bg-transparent resize-none outline-none text-gray-800 placeholder-gray-500"
              placeholder="Ask Gemini"
              rows="1"
              value={inputText}
              onChange={handleInputChange}
              onKeyPress={handleKeyPress}
              style={{ minHeight: '24px', maxHeight: '120px' }}
            ></textarea>

            {/* Action icons */}
            <div className="flex items-center space-x-2">
              {/* Summarize Conversation button */}
              <button
                type="button"
                className="p-2 rounded-full hover:bg-gray-200 text-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
                onClick={handleSummarizeConversation}
                disabled={isLoading || messages.length === 0}
                title="Summarize Conversation"
              >
                <svg
                  className="w-6 h-6"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"
                  ></path>
                </svg>
              </button>

              {/* Rephrase Last Message button */}
              <button
                type="button"
                className="p-2 rounded-full hover:bg-gray-200 text-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
                onClick={handleRephraseLastMessage}
                disabled={isLoading || !messages.some(msg => msg.sender === 'user')}
                title="Rephrase Last Message"
              >
                <svg
                  className="w-6 h-6"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"
                  ></path>
                </svg>
              </button>

              {/* Send button */}
              <button
                type="button"
                className="p-2 rounded-full bg-blue-500 text-white hover:bg-blue-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
                onClick={handleSendMessage}
                disabled={isLoading || inputText.trim() === ''}
                title="Send Message"
              >
                <svg
                  className="w-6 h-6"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M14 5l7 7m0 0l-7 7m7-7H3"
                  ></path>
                </svg>
              </button>
            </div>
          </div>
        </div>

        {/* Display User ID (for debugging/multi-user identification) */}
        {userId && (
          <div className="absolute bottom-2 left-4 text-xs text-gray-400">
            User ID: {userId}
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
