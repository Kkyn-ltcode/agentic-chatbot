Here is your **complete few-shot prompt** ‚Äî handcrafted to maximize quality, recall, and structure using your upgraded schema. It includes:

* üîç Clear task definition
* üß± JSON schema breakdown
* ‚ú® 2 high-quality **examples** (few-shot) with rich entities, relationships, and rules
* üì• Space for your own document input

---

## ‚úÖ FULL FEW-SHOT INFORMATION EXTRACTION PROMPT (English, JSON Format)

> You are an intelligent information extraction system designed to read documents and extract structured knowledge for use in a property graph.
> Your job is to extract and organize information into four categories: `entities`, `relationships`, `rules`, and `document_metadata`.

---

### üìå SCHEMA OVERVIEW

#### üîπ 1. `entities`

A list of all meaningful entities (people, organizations, certificates, events, products, concepts, etc.), each with:

```json
{
  "name": "string",
  "type": "Person | Organization | Certificate | Reward | Rule | Concept | Event | Product | Location | Date | Law | Other",
  "description": "A rich explanation of the entity based strictly on the document.",
  "metadata": {
    "aliases": ["Optional alternate names"],
    "mentioned_in": ["sentence 2", "paragraph 1"],
    "value": "Optional numeric value",
    "unit": "USD / tokens / etc.",
    "conditioned_on": "Optional trigger entity"
  }
}
```

#### üîπ 2. `relationships`

Connections between entities. Each includes:

```json
{
  "entity_1": "string",
  "entity_2": "string",
  "relation": "string (e.g., owns, founded, qualified_by)",
  "description": "Full sentence describing the relation.",
  "metadata": {
    "condition": "if applicable",
    "value": "if applicable",
    "evidence": "quoted sentence from the document",
    "date": "if mentioned"
  }
}
```

#### üîπ 3. `rules`

For policies, requirements, reward systems, or conditional logic:

```json
{
  "id": "Rule_1",
  "type": "RewardRule | Requirement | AccessPolicy | TemporalRule",
  "description": "Full rule in natural language.",
  "condition": {
    "trigger": "What must be true",
    "target_entity": "Who or what must satisfy it"
  },
  "outcome": {
    "action": "What will happen",
    "object": "What is affected",
    "value": "if applicable (e.g., amount, reward)"
  },
  "metadata": {
    "evidence_sentence": "from the document",
    "start_date": "optional",
    "end_date": "optional"
  }
}
```

#### üîπ 4. `document_metadata`

```json
{
  "title": "optional",
  "language": "en",
  "published_date": "optional",
  "source": "optional",
  "topic_tags": ["education", "rewards"]
}
```

---

## ‚ú® FEW-SHOT EXAMPLES

---

### üß™ **Example 1: Document about a scholarship**

**Document**:
"Students who achieve a GPA of 3.8 or higher will be eligible for the Dean‚Äôs Excellence Scholarship, worth 2,000 USD."

**Extraction**:

```json
{
  "entities": [
    {
      "name": "Dean‚Äôs Excellence Scholarship",
      "type": "Reward",
      "description": "A scholarship awarded to high-achieving students.",
      "metadata": {
        "value": "2000",
        "unit": "USD",
        "mentioned_in": ["sentence 1"]
      }
    },
    {
      "name": "GPA 3.8",
      "type": "Requirement",
      "description": "A grade point average threshold for eligibility.",
      "metadata": {
        "value": "3.8"
      }
    }
  ],
  "relationships": [
    {
      "entity_1": "GPA 3.8",
      "entity_2": "Dean‚Äôs Excellence Scholarship",
      "relation": "qualifies_for",
      "description": "Students with GPA 3.8 or higher qualify for the Dean‚Äôs Excellence Scholarship.",
      "metadata": {
        "condition": "if GPA ‚â• 3.8",
        "value": "2000",
        "unit": "USD",
        "evidence": "Students who achieve a GPA of 3.8 or higher will be eligible for the Dean‚Äôs Excellence Scholarship."
      }
    }
  ],
  "rules": [
    {
      "id": "Rule_1",
      "type": "RewardRule",
      "description": "Students with a GPA of 3.8 or higher receive a 2000 USD scholarship.",
      "condition": {
        "trigger": "GPA ‚â• 3.8",
        "target_entity": "Student"
      },
      "outcome": {
        "action": "receive",
        "object": "Dean‚Äôs Excellence Scholarship",
        "value": "2000 USD"
      },
      "metadata": {
        "evidence_sentence": "Students who achieve a GPA of 3.8 or higher will be eligible for the Dean‚Äôs Excellence Scholarship."
      }
    }
  ],
  "document_metadata": {
    "language": "en",
    "topic_tags": ["education", "scholarships", "academic policy"]
  }
}
```

---

### üß™ **Example 2: Document about company acquisition**

**Document**:
"On January 10, 2022, TechNova acquired CodeSprint, a startup specializing in code automation."

**Extraction**:

```json
{
  "entities": [
    {
      "name": "TechNova",
      "type": "Organization",
      "description": "A technology company that acquired CodeSprint.",
      "metadata": {
        "mentioned_in": ["sentence 1"]
      }
    },
    {
      "name": "CodeSprint",
      "type": "Organization",
      "description": "A startup focused on code automation, acquired by TechNova.",
      "metadata": {
        "mentioned_in": ["sentence 1"]
      }
    }
  ],
  "relationships": [
    {
      "entity_1": "TechNova",
      "entity_2": "CodeSprint",
      "relation": "acquired",
      "description": "TechNova acquired CodeSprint.",
      "metadata": {
        "date": "2022-01-10",
        "evidence": "On January 10, 2022, TechNova acquired CodeSprint."
      }
    }
  ],
  "rules": [],
  "document_metadata": {
    "language": "en",
    "published_date": "2022-01-10",
    "topic_tags": ["business", "acquisition", "startups"]
  }
}
```

---

## üìù Now your turn:

**Document to analyze:**

```
{Paste your input document here}
```

---

## ‚úÖ Instructions Recap:

* Follow the schema **exactly**
* Use **rich, specific descriptions**
* Include **all types of entities** and **conditional rules**
* Use only facts from the document
* Return a single valid **JSON object**

---

Let me know if you'd like:

* üáªüá≥ A Vietnamese-translated version of this few-shot prompt
* üß† A code version that feeds this to an LLM and parses the output
* üåê A LangChain or Neo4j-compatible data loader for this schema

I'm ready when you are.
