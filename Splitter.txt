import { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';
const cache = new CellMeasurerCache({
  defaultHeight: 120, // A good initial guess for the height
  fixedWidth: true,
});

// The Row Renderer function now takes an additional parameter
const rowRenderer = ({ key, index, parent, style }) => {
  const message = messages[index];
  const isUserMessage = message.role === 'user';

  return (
    <CellMeasurer
      key={key}
      cache={cache}
      parent={parent}
      columnIndex={0}
      rowIndex={index}
    >
      {({ measure, registerChild }) => (
        <div
          ref={registerChild}
          style={style}
          className={classNames(
            'p-3 my-2 rounded-lg max-w-lg shadow-md',
            isUserMessage ? 'bg-blue-600 text-white ml-auto' : 'bg-gray-200 text-gray-800 mr-auto'
          )}
        >
          {/* Your message content */}
          <div className="flex justify-between items-start">
            <div className="font-semibold text-sm">
              {isUserMessage ? 'You' : 'Bot'}
            </div>
            <div className="flex-none text-xs text-gray-400">
              {message.timestamp}
            </div>
          </div>
          <div className="text-sm mt-1">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                a: ({ node, ...props }) => <a {...props} target="_blank" rel="noopener noreferrer" className="text-blue-200 underline hover:no-underline" />,
              }}
            >
              {message.content}
            </ReactMarkdown>
          </div>
          {/* ... rest of your message component logic */}
        </div>
      )}
    </CellMeasurer>
  );
};

// In your main return block
<List
  ref={listRef}
  width={1000}
  height={500}
  rowCount={messages.length}
  rowHeight={cache.rowHeight} // The key change here!
  rowRenderer={rowRenderer}
  overscanRowCount={10}
  scrollToIndex={messages.length - 1}
/>
