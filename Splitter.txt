useEffect(() => {
    // Generate or retrieve userId here, ensuring it's available for the whole hook
    const storedUserId = localStorage.getItem('chatbotUserId');
    const currentUserId = storedUserId || crypto.randomUUID();
    
    if (!storedUserId) {
        localStorage.setItem('chatbotUserId', currentUserId);
    }
    
    const checkInAndFetchCount = async () => {
        try {
            // Use the local currentUserId variable for the fetch calls
            await fetch(`/user_checkin/${currentUserId}`, { method: 'POST' });
            const response = await fetch('/active_users');
            const data = await response.json();
            setUserCount(data.count);
        } catch (error) {
            console.error("Failed to update active users:", error);
        }
    };

    // Run the check-in immediately when the component mounts
    checkInAndFetchCount();

    // Set up a polling interval
    const intervalId = setInterval(checkInAndFetchCount, 10000);

    // Clean up the interval on unmount
    return () => clearInterval(intervalId);
}, []); // Empty dependency array ensures this runs exactly once on mount
