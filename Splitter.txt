import polars as pl

# Assuming df has columns: ID, Src, Dst
df_src = df.select(pl.col("ID").alias("id_src"), pl.col("Src").alias("key"))
df_dst = df.select(pl.col("ID").alias("id_dst"), pl.col("Dst").alias("key"))

# Helper function to run a streaming join safely
def streaming_join(left, right, left_id, right_id):
    return (
        left.join(right, on="key", how="inner", streaming=True)
            .select(
                pl.col(f"{left_id}").alias("id1"),
                pl.col(f"{right_id}").alias("id2")
            )
            .filter(pl.col("id1") != pl.col("id2"))
    )

# 1. Src–Src
src_src = streaming_join(df_src, df_src, "id_src_left", "id_src_right")

# 2. Src–Dst
src_dst = streaming_join(df_src, df_dst, "id_src", "id_dst")

# 3. Dst–Dst
dst_dst = streaming_join(df_dst, df_dst, "id_dst_left", "id_dst_right")

# 4. Dst–Src
dst_src = streaming_join(df_dst, df_src, "id_dst", "id_src")

# Merge all edges and deduplicate
edges = (
    pl.concat([src_src, src_dst, dst_dst, dst_src], how="vertical")
      .unique()
)

# Optional: write to parquet
edges.write_parquet("edges.parquet")
