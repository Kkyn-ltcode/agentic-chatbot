import React, { useState } from 'react';
import { doc, updateDoc, serverTimestamp } from 'firebase/firestore';

const Message = ({ message, isLast, db }) => {
  const [showFeedbackForm, setShowFeedbackForm] = useState(false);
  const [feedbackText, setFeedbackText] = useState('');

  const handleSubmitFeedback = async () => {
    if (!db || !feedbackText.trim() || !message.id) return;

    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const messageDocRef = doc(db, `artifacts/${appId}/public/messages`, message.id);

      // Update the existing message document with the new feedback field
      await updateDoc(messageDocRef, {
        feedback: feedbackText,
        feedbackTimestamp: serverTimestamp(),
      });

      // Hide the form and reset the text
      setFeedbackText('');
      setShowFeedbackForm(false);
      console.log("Feedback submitted successfully!");

    } catch (error) {
      console.error("Error writing feedback to Firestore:", error);
    }
  };

  const handleCancelFeedback = () => {
    setFeedbackText('');
    setShowFeedbackForm(false);
  };

  const isUser = message.sender === 'user';
  const messageClass = isUser ? 'self-end bg-blue-600 text-white rounded-br-none' : 'self-start bg-gray-200 text-gray-900 rounded-bl-none';
  
  return (
    <div className={`flex flex-col mb-4 max-w-lg ${isUser ? 'items-end' : 'items-start'}`}>
      <div className={`p-4 rounded-xl shadow-md ${messageClass}`}>
        {message.text}
      </div>
      {!isUser && isLast && (
        <div className="flex items-center space-x-2 mt-2">
          {/* ... existing Thumbs up/down, Copy buttons would go here ... */}
          {/* Feedback Button */}
          <button
            onClick={() => setShowFeedbackForm(!showFeedbackForm)}
            className="p-2 text-gray-500 hover:text-blue-600"
            aria-label="Give feedback"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M12 2a10 10 0 0 0-9.8 11.2C2.8 14.5 4 16 5.5 16H8v-2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2h2.5c1.5 0 2.7-1.5 2.3-2.8A10 10 0 0 0 12 2zM12 2a10 10 0 0 1 8.8 5.2c.4 1.3-.8 2.8-2.3 2.8H16v2a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-2H5.5C4 10 2.8 8.5 3.2 7.2A10 10 0 0 1 12 2z"/>
            </svg>
          </button>
        </div>
      )}
      {/* Conditionally render the feedback form with submit and cancel buttons */}
      {showFeedbackForm && (
        <div className="mt-4 w-full">
          <textarea
            className="w-full p-2 border border-gray-300 rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
            rows="3"
            placeholder="Tell us what you think..."
            value={feedbackText}
            onChange={(e) => setFeedbackText(e.target.value)}
          />
          <div className="flex justify-end space-x-2 mt-2">
            <button
              onClick={handleCancelFeedback}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100"
            >
              Cancel
            </button>
            <button
              onClick={handleSubmitFeedback}
              disabled={!feedbackText.trim()}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400"
            >
              Submit
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Message;
