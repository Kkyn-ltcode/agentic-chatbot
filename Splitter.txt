async def save_conversation_history_async(user_id: str, conversation_id: str, title: str, messages: List[dict], llm_response: str, is_pinned: bool):
    """
    Asynchronously updates the conversation history in the database after the streaming is complete.
    """
    # Create the full list of messages including the new AI response
    messages.append({"id": str(len(messages) + 1), "sender": "bot", "text": llm_response, "thinkingContent": None, "isThinkingOpen": False})

    # Save or update the full conversation history
    await save_conversation_to_db(
        user_id,
        conversation_id,
        title,
        messages,
        is_pinned
    )
