import pandas as pd
import plotly.express as px
import plotly.io as pio

# Set a visually appealing template
pio.templates.default = "plotly_white"

# 1. --- Data Preparation (Using Sample Data Structure) ---
# IMPORTANT: Use pd.read_excel('your_file_name.xlsx') for your actual file
data = {
    'Tc': ['A', 'A', 'B', 'B', 'A', 'B', 'A', 'B'],
    'subtc': ['X', 'Y', 'Z', 'y', 'X', 'Z', 'Y', 'y'],
    'utt': [1066, 1066, 108, 108, 500, 200, 400, 300],
    'word acc': ['12', '43', '85', '74', '15', '90', '40', '70'],
    'phrase acc': ['12', '21', '09', '92', '10', '11', '25', '95'],
    'character acc': ['12', '54', '12', '12', '10', '15', '50', '15']
}
df = pd.DataFrame(data)

# Clean up column names
df.columns = ['Tc', 'subtc', 'utt', 'word_acc', 'phrase_acc', 'character_acc']

# Convert the accuracy columns to numeric
acc_cols = ['word_acc', 'phrase_acc', 'character_acc']
for col in acc_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

# 2. --- MELT the DataFrame (Reshaping) ---

df_long = pd.melt(
    df,
    # Columns to keep as identifiers (will be the axes and groups)
    id_vars=['Tc', 'subtc', 'utt'],
    # Columns containing the values to stack
    value_vars=acc_cols,
    var_name='Metric', # Name for the new column holding the old column names
    value_name='Accuracy' # Name for the new column holding the values
)

# Clean up Metric names for display
df_long['Metric'] = df_long['Metric'].str.replace('_acc', '').str.replace('_', ' ').str.title()

# 3. --- PLOTLY CHART CREATION ---
fig = px.bar(
    df_long,
    x='subtc', # The subcategory on the x-axis
    y='Accuracy',
    color='Metric', # Use the Metric (Word, Phrase, Character) for bar colors
    facet_col='Tc', # Use Tc to create separate columns/groups of charts (faceting)
    barmode='group', # Puts the metric bars side-by-side
    title='Accuracy Measurements by Sub Test Case, Grouped by Tc and Metric',
    labels={
        'subtc': 'Sub Test Case (subtc)',
        'Accuracy': 'Accuracy (%)'
    },
    height=500,
    template='ggplot2'
)

# 4. --- CUSTOMIZATION ---

# Clean up the facet titles (e.g., "Tc=A" becomes "Test Case: A")
fig.for_each_annotation(lambda a: a.update(text=f"Test Case: {a.text.split('=')[-1]}"))

fig.update_layout(
    xaxis_tickangle=-45,
    legend_title_text='Accuracy Metric',
    hovermode="closest",
    yaxis=dict(
        tickformat=".1f", # Display one decimal place
        ticksuffix="%"
    )
)

# Add text labels on top of the bars
fig.update_traces(texttemplate='%{y:.0f}%', textposition='outside')

fig.show()
