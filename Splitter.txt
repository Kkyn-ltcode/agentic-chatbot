import os
import io
import fitz  # PyMuPDF
import pdfplumber
from paddleocr import PaddleOCR
from pdf2image import convert_from_path

# Khá»Ÿi táº¡o PaddleOCR cho tiáº¿ng Viá»‡t (CPU)
ocr = PaddleOCR(use_angle_cls=True, lang="vi")  # hoáº·c "en" náº¿u lÃ  tiáº¿ng Anh

def read_pdf_with_paddleocr(path):
    all_text = []

    # Má»Ÿ PDF báº±ng fitz
    doc = fitz.open(path)

    # Má»Ÿ thÃªm báº±ng pdfplumber Ä‘á»ƒ láº¥y báº£ng
    with pdfplumber.open(path) as plumber_pdf:
        for i, page in enumerate(doc):
            page_text = f"--- Page {i+1} ---\n"

            # Láº¥y text cÆ¡ báº£n
            text = page.get_text().strip()

            # Náº¿u khÃ´ng cÃ³ text (PDF dáº¡ng scan)
            if not text:
                print(f"[OCR] Running PaddleOCR on page {i+1}...")
                images = convert_from_path(path, first_page=i+1, last_page=i+1)

                # Chuyá»ƒn áº£nh sang bytes
                img = images[0]
                buf = io.BytesIO()
                img.save(buf, format="PNG")
                img_bytes = buf.getvalue()

                # OCR báº±ng PaddleOCR
                result = ocr.ocr(img_bytes, cls=True)

                ocr_text = []
                for line in result[0]:
                    ocr_text.append(line[1][0])  # text
                text = "\n".join(ocr_text)

            page_text += text + "\n"

            # Láº¥y báº£ng (náº¿u cÃ³)
            plumber_page = plumber_pdf.pages[i]
            tables = plumber_page.extract_tables()
            for t_index, table in enumerate(tables, start=1):
                page_text += f"\n[Table {t_index} on Page {i+1}]\n"
                for row in table:
                    page_text += " | ".join(str(cell) if cell else "" for cell in row) + "\n"

            all_text.append(page_text)

    return "\n\n".join(all_text)


# ðŸš€ Usage
if __name__ == "__main__":
    pdf_file = "example.pdf"  # thay báº±ng file cá»§a báº¡n
    if not os.path.exists(pdf_file):
        print(f"File {pdf_file} khÃ´ng tá»“n táº¡i!")
    else:
        content = read_pdf_with_paddleocr(pdf_file)
        with open("extracted.txt", "w", encoding="utf-8") as f:
            f.write(content)
        print("âœ… Extracted content saved to extracted.txt")
