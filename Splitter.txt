@app.post("/user_checkin/{user_id}")
async def user_checkin(user_id: str):
    """
    Endpoint for a user to signal they are active, storing the data in SQLite.
    """
    conn = get_db_connection()
    c = conn.cursor()
    # Using REPLACE INTO to either insert a new row or update an existing one
    c.execute("REPLACE INTO active_sessions (user_id, last_access) VALUES (?, ?)", (user_id, datetime.now()))
    conn.commit()
    conn.close()
    return {"message": "Checked in successfully"}

@app.get("/active_users")
async def get_active_users():
    """
    Endpoint to get the count of currently active users from SQLite.
    """
    conn = get_db_connection()
    c = conn.cursor()
    
    # Calculate the time threshold for active users (e.g., last 30 seconds)
    active_threshold = datetime.now() - timedelta(seconds=30)
    
    # Query the count of users whose last access was within the threshold
    c.execute("SELECT COUNT(user_id) FROM active_sessions WHERE last_access > ?", (active_threshold,))
    count = c.fetchone()[0]
    conn.close()
    
    return {"count": count}
