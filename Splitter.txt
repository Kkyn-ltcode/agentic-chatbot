// Simple, stable scrolling without jumpiness
const scrollToBottom = useCallback(() => {
  if (!chatDisplayRef.current) return;
  
  const chatDisplay = chatDisplayRef.current;
  const isNearBottom = chatDisplay.scrollHeight - chatDisplay.scrollTop - chatDisplay.clientHeight < 100;
  
  if (isNearBottom) {
    // Simple direct assignment - no requestAnimationFrame which can cause timing issues
    chatDisplay.scrollTop = chatDisplay.scrollHeight;
  }
}, []);

// Debounced version to handle rapid updates during streaming
const scrollTimeoutRef = useRef(null);
const debouncedScroll = useCallback(() => {
  if (scrollTimeoutRef.current) {
    clearTimeout(scrollTimeoutRef.current);
  }
  
  scrollTimeoutRef.current = setTimeout(() => {
    scrollToBottom();
  }, 16); // ~60fps for smooth updates
}, [scrollToBottom]);

useEffect(() => {
  debouncedScroll();
}, [messages, debouncedScroll]);

// For immediate scrolling (new messages, page loads)
const scrollToBottomImmediately = () => {
  if (chatDisplayRef.current) {
    chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;
  }
};

// Cleanup
useEffect(() => {
  return () => {
    if (scrollTimeoutRef.current) {
      clearTimeout(scrollTimeoutRef.current);
    }
  };
}, []);

// Add scrollToBottomImmediately() calls to these locations in your existing code:

// 1. In handleSendMessage after adding user message:
// const updatedMessages = [...messages, userMessage];
// setMessages(updatedMessages);
// scrollToBottomImmediately(); // Add this line

// 2. In loadConversation after setting messages:
// setMessages(loadedMessages);
// scrollToBottomImmediately(); // Add this line

// 3. In handleNewChat after clearing messages:
// setMessages([]);
// scrollToBottomImmediately(); // Add this line
