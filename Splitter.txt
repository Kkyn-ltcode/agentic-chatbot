import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px # Still useful for the initial data melting
import plotly.io as pio

# --- 0. CONFIGURATION AND DATA PREP ---
pio.templates.default = "plotly_white"

# Define the custom color palette
COLOR_PALETTE = {
    'Word Accuracy': 'rgba(100, 100, 250, 0.9)',
    'Phrase Accuracy': 'rgba(130, 70, 230, 0.9)',
    'Character Accuracy': 'rgba(70, 50, 200, 0.9)'
}
metric_order = ['Word Accuracy', 'Phrase Accuracy', 'Character Accuracy']

# Sample Data (Use your pd.read_excel here instead of this sample)
data = {
    'Tc': ['A', 'A', 'B', 'B', 'A', 'B', 'A', 'B', 'C', 'C'],
    'subtc': ['X', 'Y', 'Z', 'y', 'X', 'Z', 'Y', 'y', 'P', 'Q'],
    'utt': [1066, 1066, 108, 108, 500, 200, 400, 300, 150, 250],
    'word acc': ['12', '43', '85', '74', '15', '90', '40', '70', '60', '55'],
    'phrase acc': ['12', '21', '09', '92', '10', '11', '25', '95', '70', '65'],
    'character acc': ['12', '54', '12', '12', '10', '15', '50', '15', '80', '75']
}
df = pd.DataFrame(data)
df.columns = ['Tc', 'subtc', 'utt', 'word_acc', 'phrase_acc', 'character_acc']
acc_cols = ['word_acc', 'phrase_acc', 'character_acc']
for col in acc_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

# MELT the DataFrame to long format
df_long = pd.melt(df, id_vars=['Tc', 'subtc', 'utt'], value_vars=acc_cols, var_name='Metric', value_name='Accuracy')
df_long['Metric'] = df_long['Metric'].str.replace('_acc', '').str.replace('_', ' ').str.title()
df_long['Metric'] = pd.Categorical(df_long['Metric'], categories=metric_order, ordered=True)
df_long = df_long.sort_values(by=['Tc', 'subtc', 'Metric'])

# --- 1. DEFINE SUBPLOT GRID ---
unique_tcs = sorted(df_long['Tc'].unique())
N_COLS = len(unique_tcs)

# Create the figure with 1 row and N columns (one for each unique Tc)
fig = make_subplots(
    rows=1,
    cols=N_COLS,
    subplot_titles=unique_tcs, # Use the Tc names as subplot titles
    shared_yaxes=True,         # Ensures the Y-axis scale is the same for all
    horizontal_spacing=0.03    # Set tight spacing between subplots
)

# --- 2. LOOP AND ADD TRACES (MANUAL FACETING) ---
for i, tc in enumerate(unique_tcs):
    df_tc = df_long[df_long['Tc'] == tc]
    col_index = i + 1 # Subplots are 1-indexed

    # Loop through each metric (Word, Phrase, Character)
    for metric in metric_order:
        df_metric = df_tc[df_tc['Metric'] == metric]

        # Use go.Bar for explicit control
        bar_trace = go.Bar(
            x=df_metric['subtc'],
            y=df_metric['Accuracy'],
            name=metric,
            marker_color=COLOR_PALETTE[metric],
            legendgroup=metric,
            # Only show legend item for the first subplot/column
            showlegend=(i == 0),
            
            # Text/Hover Template (Set explicitly for go.Bar)
            text=df_metric['Accuracy'].apply(lambda x: f'{x:.1f}%%'),
            textposition='outside',
            textfont=dict(color='black', size=11),
            hovertemplate=(
                f'<b>Test Case (Tc):</b> {tc}<br>' + # Tc is now a simple f-string variable!
                '<b>Sub-Tc:</b> %{x}<br>' +
                f'<b>{metric} Accuracy:</b> %{{y:.1f}}%%' +
                '<extra></extra>'
            )
        )

        # Add the trace to the subplot cell
        fig.add_trace(bar_trace, row=1, col=col_index)

# --- 3. APPLY GLOBAL STYLING ---

fig.update_layout(
    height=500,
    barmode='group', # Ensure bars within each subtc are grouped
    bargap=0.3,
    bargroupgap=0.1,
    
    # Title and Legend Positioning (aligned on the same top line)
    title_text='Accuracy Measurements by Test Case (Tc)',
    title_x=0.0,
    title_font_size=20,
    legend=dict(
        orientation="h", yanchor="middle", y=1.02, xanchor="right", x=1.0,
        bgcolor='rgba(255,255,255,0.8)', borderwidth=0
    ),
    
    # Background Colors
    paper_bgcolor='white',
    plot_bgcolor='rgba(255,255,255,0)',
)

# --- 4. AXIS AND ANNOTATION CLEANUP ---

# Apply settings to ALL X-axes
fig.for_each_xaxis(lambda xaxis: xaxis.update(
    tickangle=-45,
    showline=True, linecolor='lightgrey', linewidth=0.5,
    showgrid=False, title_text=''
))

# Apply settings to ALL Y-axes (making them invisible but enabling grid)
fig.for_each_yaxis(lambda yaxis: yaxis.update(
    showgrid=True, gridcolor='rgba(150, 150, 150, 0.5)', gridwidth=0.5,
    showline=False, showticklabels=False, ticks='', zeroline=False
))

# Center the subplot titles (Annotations)
fig.for_each_annotation(lambda a: a.update(
    text=a.text.split('=')[-1], # Keep only the Tc value (A, B, C...)
    x=0.5, xanchor="center", font=dict(size=14, color='black')
))

fig.show()
