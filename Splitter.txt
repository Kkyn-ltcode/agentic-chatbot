import pandas as pd
import plotly.express as px
import plotly.io as pio

# --- 1. CONFIGURATION ---
# Set a visually appealing template (e.g., 'ggplot2', 'plotly_white', 'plotly_dark')
pio.templates.default = "ggplot2"

# --- 2. DATA LOADING & CLEANING (Customize this section for your file) ---

# IMPORTANT: REPLACE THIS SAMPLE DATA WITH YOUR FILE LOADING LOGIC
# Example for an Excel file named 'your_file.xlsx':
# try:
#     df = pd.read_excel('your_file.xlsx')
# except FileNotFoundError:
#     print("Error: 'your_file.xlsx' not found. Using sample data instead.")

# Sample Data based on your description for demonstration:
data = {
    'Tc': ['A', 'A', 'B', 'B', 'A', 'B', 'A', 'B'],
    'subtc': ['X', 'Y', 'Z', 'y', 'X', 'Z', 'Y', 'y'],
    'utt': [1066, 1066, 108, 108, 500, 200, 400, 300],
    'word_acc': ['12', '43', '85', '74', '15', '90', '40', '70'],
    'phrase_acc': ['12', '21', '09', '92', '10', '11', '25', '95'],
    'character_acc': ['12', '54', '12', '12', '10', '15', '50', '15']
}
df = pd.DataFrame(data)

# Rename columns for easier use (assuming the order in your file)
df.columns = ['Tc', 'subtc', 'utt', 'word_acc', 'phrase_acc', 'character_acc']

# Convert the accuracy columns to numeric (handling potential string/object types)
acc_cols = ['word_acc', 'phrase_acc', 'character_acc']
for col in acc_cols:
    # Coerce errors to NaN and fill NaN with 0, then convert to integer
    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

# --- 3. AGGREGATION ---

# Calculate the average 'word_acc' for each combination of 'Tc' and 'subtc'
avg_acc_by_subtc = df.groupby(['Tc', 'subtc'])['word_acc'].mean().reset_index()
avg_acc_by_subtc.rename(columns={'word_acc': 'Avg_Word_Accuracy'}, inplace=True)


# --- 4. PLOTLY CHART CREATION ---

fig_grouped = px.bar(
    avg_acc_by_subtc,
    x='subtc', # The subcategory on the x-axis
    y='Avg_Word_Accuracy',
    color='Tc', # Use 'Tc' to color and group the bars
    barmode='group', # Set the bar mode to 'group' for side-by-side bars
    title='Average Word Accuracy by Sub Test Case (subtc), Grouped by Tc',
    labels={
        'subtc': 'Sub Test Case',
        'Avg_Word_Accuracy': 'Average Word Accuracy'
    },
)

# --- 5. CUSTOMIZATION & OUTPUT ---

# Customize chart appearance
fig_grouped.update_layout(
    xaxis_tickangle=-45, # Angle the x-axis labels to prevent overlap
    legend_title_text='Test Case (Tc)',
    uniformtext_minsize=10,
    hovermode="x unified", # Clean up the hover behavior
    # Add a percentage sign to the y-axis ticks
    yaxis=dict(
        tickformat=".1f", # Display one decimal place
        ticksuffix="%"
    )
)

# Add text labels on top of the bars
fig_grouped.update_traces(texttemplate='%{y:.1f}%', textposition='outside')

# Output the chart:
# 1. To display the interactive chart in a Jupyter/Colab notebook:
fig_grouped.show()

# 2. To save the chart as an interactive HTML file:
# fig_grouped.write_html("grouped_word_accuracy_chart.html")
