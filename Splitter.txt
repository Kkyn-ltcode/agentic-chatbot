import pandas as pd
import plotly.graph_objects as go
from datetime import datetime

# Read the CSV file
df = pd.read_csv('your_file.csv')

# Clean column names (remove extra spaces)
df.columns = df.columns.str.strip()

# Convert time column to datetime
# Adjust column names based on your actual CSV
time_col = [col for col in df.columns if 'time' in col.lower() or 'date' in col.lower()][0]
count_col = [col for col in df.columns if 'count' in col.lower() or 'value' in col.lower()][0]

df[time_col] = pd.to_datetime(df[time_col])
df = df.sort_values(time_col)

# Create the figure
fig = go.Figure()

# Add the line with gradient fill
fig.add_trace(go.Scatter(
    x=df[time_col],
    y=df[count_col],
    mode='lines+markers',
    name='Count',
    line=dict(
        color='rgb(147, 51, 234)',  # Purple color
        width=3,
        shape='spline',  # Smooth curve
        smoothing=1.3
    ),
    marker=dict(
        size=8,
        color='rgb(147, 51, 234)',
        line=dict(color='white', width=2)
    ),
    fill='tozeroy',
    fillcolor='rgba(147, 51, 234, 0.2)',  # Light purple fill
    hovertemplate='<b>%{x|%b %d, %Y}</b><br>Count: %{y}<extra></extra>'
))

# Update layout for a clean, modern look
fig.update_layout(
    title=dict(
        text='Time Series Analysis',
        font=dict(size=24, color='#1f2937', family='Arial, sans-serif'),
        x=0.05
    ),
    xaxis=dict(
        title='Date',
        showgrid=True,
        gridcolor='rgba(229, 231, 235, 0.8)',
        gridwidth=1,
        zeroline=False,
        tickfont=dict(size=12, color='#6b7280'),
        titlefont=dict(size=14, color='#374151')
    ),
    yaxis=dict(
        title='Count',
        showgrid=True,
        gridcolor='rgba(229, 231, 235, 0.8)',
        gridwidth=1,
        zeroline=False,
        tickfont=dict(size=12, color='#6b7280'),
        titlefont=dict(size=14, color='#374151')
    ),
    plot_bgcolor='white',
    paper_bgcolor='#f9fafb',
    hovermode='x unified',
    hoverlabel=dict(
        bgcolor='white',
        font_size=13,
        font_family='Arial, sans-serif',
        bordercolor='#e5e7eb'
    ),
    margin=dict(l=60, r=40, t=80, b=60),
    height=600
)

# Add subtle box around the plot
fig.update_xaxes(showline=True, linewidth=1, linecolor='#e5e7eb', mirror=False)
fig.update_yaxes(showline=True, linewidth=1, linecolor='#e5e7eb', mirror=False)

# Show the figure
fig.show()

# Optional: Save as HTML
fig.write_html('time_series_chart.html')

# Print some statistics
print(f"\nðŸ“Š Data Summary:")
print(f"Total data points: {len(df)}")
print(f"Average count: {df[count_col].mean():.2f}")
print(f"Max count: {df[count_col].max()}")
print(f"Min count: {df[count_col].min()}")
print(f"Date range: {df[time_col].min().strftime('%Y-%m-%d')} to {df[time_col].max().strftime('%Y-%m-%d')}")
