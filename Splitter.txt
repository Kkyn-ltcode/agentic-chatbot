// Simple version without throttling - replace your existing scroll useEffect with this:

const forceScrollToBottomRef = useRef(false);

const scrollToBottom = useCallback((force = false) => {
  if (!chatDisplayRef.current) return;
  
  const chatDisplay = chatDisplayRef.current;
  const scrollableHeight = chatDisplay.scrollHeight - chatDisplay.clientHeight;
  const scrollPercentage = scrollableHeight > 0 ? (chatDisplay.scrollTop / scrollableHeight) * 100 : 100;
  const isNearBottom = scrollPercentage >= 90; // User is within 90% of the bottom
  
  if (force || isNearBottom) {
    if (force) {
      // Immediate scroll for new messages/page loads
      requestAnimationFrame(() => {
        if (chatDisplayRef.current) {
          chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;
        }
      });
    } else {
      // Simple smooth scroll during streaming - less jumpy
      requestAnimationFrame(() => {
        if (chatDisplayRef.current) {
          chatDisplayRef.current.scrollTo({
            top: chatDisplayRef.current.scrollHeight,
            behavior: 'smooth'
          });
        }
      });
    }
  }
}, []);

useEffect(() => {
  if (forceScrollToBottomRef.current) {
    scrollToBottom(true);
    forceScrollToBottomRef.current = false;
  } else {
    scrollToBottom();
  }
}, [messages, scrollToBottom]);

// Function to trigger immediate scrolling
const scrollToBottomImmediately = () => {
  forceScrollToBottomRef.current = true;
};

// Add scrollToBottomImmediately() calls to these locations in your existing code:

// 1. In handleSendMessage after adding user message:
// const updatedMessages = [...messages, userMessage];
// setMessages(updatedMessages);
// scrollToBottomImmediately(); // Add this line

// 2. In loadConversation after setting messages:
// setMessages(loadedMessages);
// scrollToBottomImmediately(); // Add this line

// 3. In handleNewChat after clearing messages:
// setMessages([]);
// scrollToBottomImmediately(); // Add this line
