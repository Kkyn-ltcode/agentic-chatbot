import dash
from dash import dcc, html, dash_table, Input, Output, State, callback_context
import dash_bootstrap_components as dbc
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
from pathlib import Path
import openpyxl
from datetime import datetime
import json
import base64

# Configuration
FOLDER_PATH = "./data"  # Change this to your folder path
REFRESH_INTERVAL = 3600000  # 1 hour in milliseconds (3600 seconds * 1000)

# Color scheme - Modern professional palette
COLORS = {
    'primary': '#2E86AB',
    'secondary': '#A23B72',
    'success': '#06A77D',
    'warning': '#F18F01',
    'danger': '#C73E1D',
    'background': '#F8F9FA',
    'card': '#FFFFFF',
    'text': '#2C3E50',
    'border': '#E9ECEF'
}

class DataLoader:
    def __init__(self, folder_path):
        self.folder_path = Path(folder_path)
        self.data_cache = {}
        self.last_update = None
        
    def load_all_data(self):
        """Load all xlsx file pairs from the folder"""
        summary_files = list(self.folder_path.glob("*_[0-9]*.xlsx"))
        summary_files = [f for f in summary_files if not f.stem.endswith('_cer')]
        
        all_summary = []
        all_details = []
        
        for summary_file in summary_files:
            # Load summary file
            try:
                df_summary = pd.read_excel(summary_file)
                df_summary['file_source'] = summary_file.stem
                all_summary.append(df_summary)
                
                # Load corresponding detail file
                detail_file = summary_file.parent / f"{summary_file.stem}_cer.xlsx"
                if detail_file.exists():
                    xl_file = pd.ExcelFile(detail_file)
                    for sheet_name in xl_file.sheet_names:
                        df_detail = pd.read_excel(detail_file, sheet_name=sheet_name)
                        df_detail['subtc'] = sheet_name
                        df_detail['file_source'] = summary_file.stem
                        all_details.append(df_detail)
            except Exception as e:
                print(f"Error loading {summary_file}: {e}")
        
        self.data_cache['summary'] = pd.concat(all_summary, ignore_index=True) if all_summary else pd.DataFrame()
        self.data_cache['details'] = pd.concat(all_details, ignore_index=True) if all_details else pd.DataFrame()
        self.last_update = datetime.now()
        
        return self.data_cache
    
    def get_data(self):
        if not self.data_cache:
            self.load_all_data()
        return self.data_cache

# Initialize app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
loader = DataLoader(FOLDER_PATH)

# App layout
app.layout = dbc.Container([
    # Store for data
    dcc.Store(id='data-store'),
    dcc.Interval(id='interval-component', interval=REFRESH_INTERVAL, n_intervals=0),
    dcc.Download(id="download-report"),
    
    # Header
    dbc.Row([
        dbc.Col([
            html.H1("ASR Performance Monitoring Dashboard", 
                   className="text-center mb-2",
                   style={'color': COLORS['primary'], 'fontWeight': 'bold'}),
            html.P(id='last-update', className="text-center text-muted mb-2"),
            html.P("Auto-refresh: Every 1 hour", className="text-center text-muted mb-3",
                   style={'fontSize': '0.9em'})
        ], width=10),
        dbc.Col([
            dbc.Button(
                [html.I(className="fas fa-download me-2"), "Export Report"],
                id="export-btn",
                color="primary",
                size="lg",
                className="mt-3"
            )
        ], width=2, className="text-end")
    ]),
    
    # Tabs
    dbc.Tabs([
        # Overview Tab
        dbc.Tab(label="Overview", tab_id="overview", children=[
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Total Utterances", className="text-muted"),
                            html.H2(id="total-utt", className="text-primary")
                        ])
                    ], className="mb-3 shadow-sm")
                ], width=3),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Avg Word Acc", className="text-muted"),
                            html.H2(id="avg-word-acc", className="text-success")
                        ])
                    ], className="mb-3 shadow-sm")
                ], width=3),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Avg Phrase Acc", className="text-muted"),
                            html.H2(id="avg-phrase-acc", className="text-info")
                        ])
                    ], className="mb-3 shadow-sm")
                ], width=3),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Avg Char Acc", className="text-muted"),
                            html.H2(id="avg-char-acc", className="text-warning")
                        ])
                    ], className="mb-3 shadow-sm")
                ], width=3),
            ], className="mb-4"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            dcc.Graph(id='accuracy-comparison')
                        ])
                    ], className="shadow-sm")
                ], width=6),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            dcc.Graph(id='tc-performance')
                        ])
                    ], className="shadow-sm")
                ], width=6),
            ], className="mb-4"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            dcc.Graph(id='heatmap-performance')
                        ])
                    ], className="shadow-sm")
                ], width=12),
            ])
        ]),
        
        # Category Analysis Tab
        dbc.Tab(label="Category Analysis", tab_id="category", children=[
            dbc.Row([
                dbc.Col([
                    html.Label("Select Tc:"),
                    dcc.Dropdown(id='tc-filter', multi=True, placeholder="All categories")
                ], width=4),
                dbc.Col([
                    html.Label("Select subtc:"),
                    dcc.Dropdown(id='subtc-filter', multi=True, placeholder="All sub-categories")
                ], width=4),
                dbc.Col([
                    html.Label("Select File:"),
                    dcc.Dropdown(id='file-filter', multi=True, placeholder="All files")
                ], width=4),
            ], className="mb-4 mt-3"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            dcc.Graph(id='subtc-breakdown')
                        ])
                    ], className="shadow-sm")
                ], width=12),
            ], className="mb-4"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Detailed Metrics Table"),
                            dash_table.DataTable(
                                id='summary-table',
                                style_table={'overflowX': 'auto'},
                                style_cell={'textAlign': 'left', 'padding': '10px'},
                                style_header={
                                    'backgroundColor': COLORS['primary'],
                                    'color': 'white',
                                    'fontWeight': 'bold'
                                },
                                style_data_conditional=[
                                    {
                                        'if': {'row_index': 'odd'},
                                        'backgroundColor': COLORS['background']
                                    }
                                ],
                                page_size=15,
                                sort_action='native',
                                filter_action='native',
                                export_format='xlsx',
                                export_headers='display'
                            )
                        ])
                    ], className="shadow-sm")
                ], width=12),
            ])
        ]),
        
        # Error Analysis Tab
        dbc.Tab(label="Error Analysis", tab_id="error", children=[
            dbc.Row([
                dbc.Col([
                    html.Label("Filter by subtc:"),
                    dcc.Dropdown(id='error-subtc-filter', placeholder="Select sub-category")
                ], width=6),
                dbc.Col([
                    html.Label("Filter by Result:"),
                    dcc.Dropdown(
                        id='result-filter',
                        options=[
                            {'label': 'All', 'value': 'ALL'},
                            {'label': 'PASS', 'value': 'PASS'},
                            {'label': 'FAIL', 'value': 'FAIL'}
                        ],
                        value='ALL'
                    )
                ], width=6),
            ], className="mb-4 mt-3"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            dcc.Graph(id='pass-fail-chart')
                        ])
                    ], className="shadow-sm")
                ], width=6),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            dcc.Graph(id='error-distribution')
                        ])
                    ], className="shadow-sm")
                ], width=6),
            ], className="mb-4"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Utterance Details"),
                            dash_table.DataTable(
                                id='error-table',
                                style_table={'overflowX': 'auto'},
                                style_cell={
                                    'textAlign': 'left',
                                    'padding': '10px',
                                    'whiteSpace': 'normal',
                                    'height': 'auto',
                                },
                                style_header={
                                    'backgroundColor': COLORS['primary'],
                                    'color': 'white',
                                    'fontWeight': 'bold'
                                },
                                style_data_conditional=[
                                    {
                                        'if': {'row_index': 'odd'},
                                        'backgroundColor': COLORS['background']
                                    },
                                    {
                                        'if': {
                                            'filter_query': '{result} = "FAIL"',
                                            'column_id': 'result'
                                        },
                                        'backgroundColor': '#FFE5E5',
                                        'color': COLORS['danger']
                                    },
                                    {
                                        'if': {
                                            'filter_query': '{result} = "PASS"',
                                            'column_id': 'result'
                                        },
                                        'backgroundColor': '#E5F9F0',
                                        'color': COLORS['success']
                                    }
                                ],
                                page_size=20,
                                sort_action='native',
                                filter_action='native',
                                export_format='xlsx',
                                export_headers='display'
                            )
                        ])
                    ], className="shadow-sm")
                ], width=12),
            ])
        ]),
        
        # Utterance Inspector Tab
        dbc.Tab(label="Utterance Inspector", tab_id="inspector", children=[
            dbc.Row([
                dbc.Col([
                    html.Label("Search in Reference/Hypothesis:"),
                    dcc.Input(
                        id='search-input',
                        type='text',
                        placeholder='Enter text to search...',
                        className='form-control mb-3'
                    )
                ], width=12),
            ], className="mt-3"),
            
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4("Search Results"),
                            dash_table.DataTable(
                                id='search-table',
                                style_table={'overflowX': 'auto'},
                                style_cell={
                                    'textAlign': 'left',
                                    'padding': '10px',
                                    'whiteSpace': 'normal',
                                    'height': 'auto',
                                    'minWidth': '100px',
                                },
                                style_header={
                                    'backgroundColor': COLORS['primary'],
                                    'color': 'white',
                                    'fontWeight': 'bold'
                                },
                                style_data_conditional=[
                                    {
                                        'if': {'row_index': 'odd'},
                                        'backgroundColor': COLORS['background']
                                    }
                                ],
                                page_size=25,
                                sort_action='native',
                                export_format='xlsx',
                                export_headers='display'
                            )
                        ])
                    ], className="shadow-sm")
                ], width=12),
            ])
        ]),
    ], id="tabs", active_tab="overview")
], fluid=True, style={'backgroundColor': COLORS['background'], 'padding': '20px'})

# Helper function to generate static HTML report
def generate_html_report(data):
    """Generate a standalone HTML report with interactive Plotly charts"""
    
    if not data or data['summary'].empty:
        return "<html><body><h1>No data available</h1></body></html>"
    
    df_summary = pd.DataFrame(data['summary'])
    df_details = pd.DataFrame(data['details'])
    df_summary.columns = df_summary.columns.str.strip().str.lower()
    df_details.columns = df_details.columns.str.strip()
    
    # Calculate KPIs
    total_utt = len(df_summary)
    avg_word = df_summary['word acc'].mean() if 'word acc' in df_summary.columns else 0
    avg_phrase = df_summary['phrase acc'].mean() if 'phrase acc' in df_summary.columns else 0
    avg_char = df_summary['character acc'].mean() if 'character acc' in df_summary.columns else 0
    
    # Create charts
    # 1. Accuracy comparison
    acc_cols = ['word acc', 'phrase acc', 'character acc']
    acc_cols = [col for col in acc_cols if col in df_summary.columns]
    avg_accs = df_summary[acc_cols].mean()
    
    fig1 = go.Figure(data=[
        go.Bar(x=avg_accs.index, y=avg_accs.values,
               marker_color=[COLORS['success'], COLORS['primary'], COLORS['warning']],
               text=[f"{v:.1f}%" for v in avg_accs.values],
               textposition='auto')
    ])
    fig1.update_layout(
        title="Average Accuracy Metrics",
        xaxis_title="Metric Type",
        yaxis_title="Accuracy (%)",
        template="plotly_white",
        height=400
    )
    
    # 2. Performance by Tc
    tc_col = 'tc' if 'tc' in df_summary.columns else 'Tc' if 'Tc' in df_summary.columns else None
    if tc_col:
        tc_perf = df_summary.groupby(tc_col)[acc_cols].mean().reset_index()
        fig2 = go.Figure()
        for col in acc_cols:
            fig2.add_trace(go.Bar(name=col, x=tc_perf[tc_col], y=tc_perf[col]))
        fig2.update_layout(
            title="Performance by Category (Tc)",
            xaxis_title="Category",
            yaxis_title="Accuracy (%)",
            barmode='group',
            template="plotly_white",
            height=400
        )
    else:
        fig2 = go.Figure()
    
    # 3. Heatmap
    if tc_col and 'subtc' in df_summary.columns:
        pivot_data = df_summary.pivot_table(values='word acc', index=tc_col, columns='subtc', aggfunc='mean')
        fig3 = go.Figure(data=go.Heatmap(
            z=pivot_data.values,
            x=pivot_data.columns,
            y=pivot_data.index,
            colorscale='RdYlGn',
            text=np.round(pivot_data.values, 1),
            texttemplate='%{text}',
            textfont={"size": 10},
            colorbar=dict(title="Accuracy %")
        ))
        fig3.update_layout(
            title="Performance Heatmap (Tc vs subtc)",
            xaxis_title="Sub-category",
            yaxis_title="Category",
            template="plotly_white",
            height=500
        )
    else:
        fig3 = go.Figure()
    
    # 4. Pass/Fail distribution
    if not df_details.empty and 'result' in df_details.columns:
        result_counts = df_details['result'].value_counts()
        fig4 = go.Figure(data=[go.Pie(
            labels=result_counts.index,
            values=result_counts.values,
            marker_colors=[COLORS['success'] if x == 'PASS' else COLORS['danger'] for x in result_counts.index],
            textinfo='label+percent+value'
        )])
        fig4.update_layout(title="Overall Pass/Fail Distribution", template="plotly_white", height=400)
    else:
        fig4 = go.Figure()
    
    # 5. Error distribution by subtc
    if not df_details.empty and 'subtc' in df_details.columns and 'result' in df_details.columns:
        error_dist = df_details.groupby(['subtc', 'result']).size().reset_index(name='count')
        fig5 = px.bar(error_dist, x='subtc', y='count', color='result',
                      color_discrete_map={'PASS': COLORS['success'], 'FAIL': COLORS['danger']},
                      title="Error Distribution by Sub-category")
        fig5.update_layout(template="plotly_white", height=400)
    else:
        fig5 = go.Figure()
    
    # Convert figures to HTML
    chart1_html = fig1.to_html(include_plotlyjs='cdn', div_id="chart1")
    chart2_html = fig2.to_html(include_plotlyjs=False, div_id="chart2")
    chart3_html = fig3.to_html(include_plotlyjs=False, div_id="chart3")
    chart4_html = fig4.to_html(include_plotlyjs=False, div_id="chart4")
    chart5_html = fig5.to_html(include_plotlyjs=False, div_id="chart5")
    
    # Summary table
    summary_html = df_summary.head(50).to_html(classes='table table-striped table-hover', index=False)
    
    # Top errors table (FAIL only)
    if not df_details.empty and 'result' in df_details.columns:
        errors_df = df_details[df_details['result'] == 'FAIL'].head(50)
        errors_html = errors_df.to_html(classes='table table-striped table-hover', index=False)
    else:
        errors_html = "<p>No error data available</p>"
    
    # Build HTML
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>ASR Performance Report - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {{
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                background-color: {COLORS['background']};
                padding: 20px;
            }}
            .header {{
                background: linear-gradient(135deg, {COLORS['primary']} 0%, {COLORS['secondary']} 100%);
                color: white;
                padding: 30px;
                border-radius: 10px;
                margin-bottom: 30px;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }}
            .kpi-card {{
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                margin-bottom: 20px;
                text-align: center;
            }}
            .kpi-value {{
                font-size: 2.5em;
                font-weight: bold;
                margin: 10px 0;
            }}
            .kpi-label {{
                color: #6c757d;
                font-size: 1.1em;
            }}
            .chart-container {{
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                margin-bottom: 30px;
            }}
            .section-title {{
                color: {COLORS['primary']};
                border-bottom: 3px solid {COLORS['primary']};
                padding-bottom: 10px;
                margin: 30px 0 20px 0;
                font-weight: bold;
            }}
            .table {{
                background: white;
                border-radius: 8px;
                overflow: hidden;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
            .table thead {{
                background-color: {COLORS['primary']};
                color: white;
            }}
            .footer {{
                text-align: center;
                color: #6c757d;
                margin-top: 50px;
                padding: 20px;
            }}
        </style>
    </head>
    <body>
        <div class="container-fluid">
            <div class="header">
                <h1>🎙️ ASR Performance Monitoring Report</h1>
                <p class="mb-0">Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <h2 class="section-title">📊 Key Performance Indicators</h2>
            <div class="row">
                <div class="col-md-3">
                    <div class="kpi-card">
                        <div class="kpi-label">Total Utterances</div>
                        <div class="kpi-value" style="color: {COLORS['primary']}">{total_utt:,}</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="kpi-card">
                        <div class="kpi-label">Avg Word Accuracy</div>
                        <div class="kpi-value" style="color: {COLORS['success']}">{avg_word:.1f}%</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="kpi-card">
                        <div class="kpi-label">Avg Phrase Accuracy</div>
                        <div class="kpi-value" style="color: {COLORS['primary']}">{avg_phrase:.1f}%</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="kpi-card">
                        <div class="kpi-label">Avg Character Accuracy</div>
                        <div class="kpi-value" style="color: {COLORS['warning']}">{avg_char:.1f}%</div>
                    </div>
                </div>
            </div>
            
            <h2 class="section-title">📈 Performance Overview</h2>
            <div class="row">
                <div class="col-md-6">
                    <div class="chart-container">
                        {chart1_html}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="chart-container">
                        {chart2_html}
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-12">
                    <div class="chart-container">
                        {chart3_html}
                    </div>
                </div>
            </div>
            
            <h2 class="section-title">🔍 Error Analysis</h2>
            <div class="row">
                <div class="col-md-6">
                    <div class="chart-container">
                        {chart4_html}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="chart-container">
                        {chart5_html}
                    </div>
                </div>
            </div>
            
            <h2 class="section-title">📋 Summary Data (Top 50 records)</h2>
            <div class="chart-container">
                {summary_html}
            </div>
            
            <h2 class="section-title">❌ Top Errors (Top 50 failures)</h2>
            <div class="chart-container">
                {errors_html}
            </div>
            
            <div class="footer">
                <p>ASR Performance Monitoring Dashboard | Auto-generated report</p>
                <p>This is a static snapshot. For real-time monitoring, use the live dashboard.</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    return html_content

# Callbacks
@app.callback(
    [Output('data-store', 'data'),
     Output('last-update', 'children')],
    [Input('interval-component', 'n_intervals')]
)
def update_data(n):
    data = loader.load_all_data()
    update_time = loader.last_update.strftime("%Y-%m-%d %H:%M:%S") if loader.last_update else "Never"
    return data, f"Last updated: {update_time}"

# Export report callback
@app.callback(
    Output("download-report", "data"),
    Input("export-btn", "n_clicks"),
    State("data-store", "data"),
    prevent_initial_call=True
)
def export_report(n_clicks, data):
    if n_clicks and data:
        html_content = generate_html_report(data)
        filename = f"ASR_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        return dict(content=html_content, filename=filename)
    return None

# Update filter options
@app.callback(
    [Output('tc-filter', 'options'),
     Output('subtc-filter', 'options'),
     Output('file-filter', 'options'),
     Output('error-subtc-filter', 'options')],
    [Input('data-store', 'data')]
)
def update_filters(data):
    if not data or data['summary'].empty:
        return [], [], [], []
    
    df = pd.DataFrame(data['summary'])
    df.columns = df.columns.str.strip().str.lower()
    
    tc_col = 'tc' if 'tc' in df.columns else 'Tc' if 'Tc' in df.columns else None
    
    tc_options = [{'label': tc, 'value': tc} for tc in sorted(df[tc_col].unique())] if tc_col else []
    subtc_options = [{'label': subtc, 'value': subtc} for subtc in sorted(df['subtc'].unique())] if 'subtc' in df.columns else []
    file_options = [{'label': f, 'value': f} for f in sorted(df['file_source'].unique())] if 'file_source' in df.columns else []
    
    return tc_options, subtc_options, file_options, subtc_options

# Update KPIs
@app.callback(
    [Output('total-utt', 'children'),
     Output('avg-word-acc', 'children'),
     Output('avg-phrase-acc', 'children'),
     Output('avg-char-acc', 'children')],
    [Input('data-store', 'data')]
)
def update_kpis(data):
    if not data or data['summary'].empty:
        return "0", "0%", "0%", "0%"
    
    df = pd.DataFrame(data['summary'])
    df.columns = df.columns.str.strip().str.lower()
    
    total_utt = f"{len(df):,}"
    avg_word = f"{df['word acc'].mean():.1f}%" if 'word acc' in df.columns else "N/A"
    avg_phrase = f"{df['phrase acc'].mean():.1f}%" if 'phrase acc' in df.columns else "N/A"
    avg_char = f"{df['character acc'].mean():.1f}%" if 'character acc' in df.columns else "N/A"
    
    return total_utt, avg_word, avg_phrase, avg_char

# Update charts
@app.callback(
    [Output('accuracy-comparison', 'figure'),
     Output('tc-performance', 'figure'),
     Output('heatmap-performance', 'figure')],
    [Input('data-store', 'data')]
)
def update_overview_charts(data):
    if not data or data['summary'].empty:
        empty_fig = go.Figure()
        empty_fig.add_annotation(text="No data available", showarrow=False)
        return empty_fig, empty_fig, empty_fig
    
    df = pd.DataFrame(data['summary'])
    df.columns = df.columns.str.strip().str.lower()
    
    # Accuracy comparison
    acc_cols = ['word acc', 'phrase acc', 'character acc']
    acc_cols = [col for col in acc_cols if col in df.columns]
    avg_accs = df[acc_cols].mean()
    
    fig1 = go.Figure(data=[
        go.Bar(x=avg_accs.index, y=avg_accs.values,
               marker_color=[COLORS['success'], COLORS['primary'], COLORS['warning']],
               text=[f"{v:.1f}%" for v in avg_accs.values],
               textposition='auto')
    ])
    fig1.update_layout(
        title="Average Accuracy Metrics",
        xaxis_title="Metric Type",
        yaxis_title="Accuracy (%)",
        template="plotly_white"
    )
    
    # Performance by Tc
    tc_col = 'tc' if 'tc' in df.columns else 'Tc' if 'Tc' in df.columns else None
    if tc_col:
        tc_perf = df.groupby(tc_col)[acc_cols].mean().reset_index()
        fig2 = go.Figure()
        for col in acc_cols:
            fig2.add_trace(go.Bar(name=col, x=tc_perf[tc_col], y=tc_perf[col]))
        fig2.update_layout(
            title="Performance by Category (Tc)",
            xaxis_title="Category",
            yaxis_title="Accuracy (%)",
            barmode='group',
            template="plotly_white"
        )
    else:
        fig2 = go.Figure()
        fig2.add_annotation(text="Tc column not found", showarrow=False)
    
    # Heatmap
    if tc_col and 'subtc' in df.columns:
        pivot_data = df.pivot_table(values='word acc', index=tc_col, columns='subtc', aggfunc='mean')
        fig3 = go.Figure(data=go.Heatmap(
            z=pivot_data.values,
            x=pivot_data.columns,
            y=pivot_data.index,
            colorscale='RdYlGn',
            text=np.round(pivot_data.values, 1),
            texttemplate='%{text}',
            textfont={"size": 10},
            colorbar=dict(title="Accuracy %")
        ))
        fig3.update_layout(
            title="Performance Heatmap (Tc vs subtc)",
            xaxis_title="Sub-category",
            yaxis_title="Category",
            template="plotly_white"
        )
    else:
        fig3 = go.Figure()
        fig3.add_annotation(text="Insufficient data for heatmap", showarrow=False)
    
    return fig1, fig2, fig3

# Category analysis callbacks
@app.callback(
    [Output('subtc-breakdown', 'figure'),
     Output('summary-table', 'data'),
     Output('summary-table', 'columns')],
    [Input('data-store', 'data'),
     Input('tc-filter', 'value'),
     Input('subtc-filter', 'value'),
     Input('file-filter', 'value')]
)
def update_category_analysis(data, tc_filter, subtc_filter, file_filter):
    if not data or data['summary'].empty:
        empty_fig = go.Figure()
        empty_fig.add_annotation(text="No data available", showarrow=False)
        return empty_fig, [], []
    
    df = pd.DataFrame(data['summary'])
    df.columns = df.columns.str.strip().str.lower()
    
    # Apply filters
    tc_col = 'tc' if 'tc' in df.columns else 'Tc' if 'Tc' in df.columns else None
    if tc_filter and tc_col:
        df = df[df[tc_col].isin(tc_filter)]
    if subtc_filter:
        df = df[df['subtc'].isin(subtc_filter)]
    if file_filter:
        df = df[df['file_source'].isin(file_filter)]
    
    # Subtc breakdown
    if 'subtc' in df.columns:
        subtc_perf = df.groupby('subtc')[['word acc', 'phrase acc', 'character acc']].mean().reset_index()
        fig = go.Figure()
        fig.add_trace(go.Bar(name='Word Acc', x=subtc_perf['subtc'], y=subtc_perf['word acc'], marker_color=COLORS['success']))
        fig.add_trace(go.Bar(name='Phrase Acc', x=subtc_perf['subtc'], y=subtc_perf['phrase acc'], marker_color=COLORS['primary']))
        fig.add_trace(go.Bar(name='Char Acc', x=subtc_perf['subtc'], y=subtc_perf['character acc'], marker_color=COLORS['warning']))
        fig.update_layout(
            title="Performance by Sub-category",
            xaxis_title="Sub-category",
            yaxis_title="Accuracy (%)",
            barmode='group',
            template="plotly_white"
        )
    else:
        fig = go.Figure()
        fig.add_annotation(text="No subtc data available", showarrow=False)
    
    # Table data
    table_data = df.to_dict('records')
    columns = [{"name": col, "id": col} for col in df.columns]
    
    return fig, table_data, columns

# Error analysis callbacks
@app.callback(
    [Output('pass-fail-chart', 'figure'),
     Output('error-distribution', 'figure'),
     Output('error-table', 'data'),
     Output('error-table', 'columns')],
    [Input('data-store', 'data'),
     Input('error-subtc-filter', 'value'),
     Input('result-filter', 'value')]
)
def update_error_analysis(data, subtc_filter, result_filter):
    if not data or data['details'].empty:
        empty_fig = go.Figure()
        empty_fig.add_annotation(text="No data available", showarrow=False)
        return empty_fig, empty_fig, [], []
    
    df = pd.DataFrame(data['details'])
    df.columns = df.columns.str.strip()
    
    # Apply filters
    if subtc_filter:
        df = df[df['subtc'] == subtc_filter]
    if result_filter and result_filter != 'ALL':
        df = df[df['result'] == result_filter]
    
    # Pass/Fail chart
    if 'result' in df.columns:
        result_counts = df['result'].value_counts()
        fig1 = go.Figure(data=[go.Pie(
            labels=result_counts.index,
            values=result_counts.values,
            marker_colors=[COLORS['success'] if x == 'PASS' else COLORS['danger'] for x in result_counts.index],
            textinfo='label+percent+value'
        )])
        fig1.update_layout(title="Pass/Fail Distribution", template="plotly_white")
    else:
        fig1 = go.Figure()
        fig1.add_annotation(text="No result data available", showarrow=False)
    
    # Error distribution by subtc
    if 'subtc' in df.columns and 'result' in df.columns:
        error_dist = df.groupby(['subtc', 'result']).size().reset_index(name='count')
        fig2 = px.bar(error_dist, x='subtc', y='count', color='result',
                      color_discrete_map={'PASS': COLORS['success'], 'FAIL': COLORS['danger']},
                      title="Error Distribution by Sub-category")
        fig2.update_layout(template="plotly_white")
    else:
        fig2 = go.Figure()
        fig2.add_annotation(text="Insufficient data for distribution", showarrow=False)
    
    # Table data
    table_data = df.to_dict('records')
    columns = [{"name": col, "id": col} for col in df.columns]
    
    return fig1, fig2, table_data, columns

# Search functionality
@app.callback(
    [Output('search-table', 'data'),
     Output('search-table', 'columns')],
    [Input('search-input', 'value'),
     Input('data-store', 'data')]
)
def search_utterances(search_term, data):
    if not data or data['details'].empty or not search_term:
        return [], []
    
    df = pd.DataFrame(data['details'])
    df.columns = df.columns.str.strip()
    
    # Search in Reference and hypothesis columns
    mask = False
    for col in df.columns:
        if df[col].dtype == 'object':
            mask = mask | df[col].str.contains(search_term, case=False, na=False)
    
    filtered_df = df[mask]
    
    table_data = filtered_df.to_dict('records')
    columns = [{"name": col, "id": col} for col in filtered_df.columns]
    
    return table_data, columns

if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0', port=8050)
        
